<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lvlibo.github.io</id>
    <title>Lvlibo&apos;s Blog</title>
    <updated>2020-12-02T02:15:23.875Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lvlibo.github.io"/>
    <link rel="self" href="https://lvlibo.github.io/atom.xml"/>
    <subtitle>welcome</subtitle>
    <logo>https://lvlibo.github.io/images/avatar.png</logo>
    <icon>https://lvlibo.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Lvlibo&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[模板-线段树]]></title>
        <id>https://lvlibo.github.io/post/mo-ban-xian-duan-shu/</id>
        <link href="https://lvlibo.github.io/post/mo-ban-xian-duan-shu/">
        </link>
        <updated>2020-12-02T01:56:10.000Z</updated>
        <summary type="html"><![CDATA[<p>qwq</p>
]]></summary>
        <content type="html"><![CDATA[<p>qwq</p>
<!-- more -->
<h3 id="区间加-区间查询">区间加、区间查询</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;

const int N = 1e5 + 10;
struct SegmentTree{
	int l, r;
	long long sum, add;
}t[N * 4]; 
int a[N], n, m;

void pushup(int p) {
	t[p].sum = t[p &lt;&lt; 1].sum + t[p &lt;&lt; 1 | 1].sum;
}

void build(int p, int l, int r){
	t[p].l = l;
	t[p].r = r;
	if(l == r){
		t[p].sum = a[l];
		return;
	}
	int mid = l + r &gt;&gt; 1;
	build(p &lt;&lt; 1, l, mid);
	build (p &lt;&lt; 1 | 1, mid + 1, r);
	pushup(p);
}

void pushdown(int p) {
	if(t[p].add) {
		int ls = p &lt;&lt; 1;
		int rs = p &lt;&lt; 1 | 1;
		t[ls].sum += t[p].add * (t[ls].r - t[ls].l + 1);
		t[rs].sum += t[p].add * (t[rs].r - t[rs].l + 1);
		t[ls].add += t[p].add;
		t[rs].add += t[p].add;
		t[p].add = 0;
	}
}

void change(int p, int l, int r, int d) {
	if(l &lt;= t[p].l &amp;&amp; r &gt;= t[p].r) {
		t[p].sum += (long long)d * (t[p].r - t[p].l + 1);
		t[p].add += d;
		return;
	}
	pushdown(p);
	int mid = t[p].l + t[p].r &gt;&gt; 1;
	if(l &lt;= mid) change(p &lt;&lt; 1, l, r, d);
	if(r &gt; mid) change(p &lt;&lt; 1 | 1, l, r, d);
	pushup(p);
}

long long ask(int p, int l, int r) {
	if(l &lt;= t[p].l &amp;&amp; r &gt;= t[p].r) return t[p].sum;
	pushdown(p);
	int mid = t[p].l + t[p].r &gt;&gt; 1;
	long long val = 0;
	if(l &lt;= mid) val += ask(p &lt;&lt; 1, l, r);
	if(r &gt; mid) val += ask(p &lt;&lt; 1 | 1, l, r);
	return val;
}

int main() {
	int n, m;
	scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
	for(int i = 1; i &lt;= n ; i ++)
		scanf(&quot;%d&quot;, &amp;a[i]);
	build(1, 1, n);
	int op, x, y, k;
	for(int i = 1; i &lt;= m ; i ++) {
		scanf(&quot;%d%d%d&quot;, &amp;op, &amp;x, &amp;y);
		if(op == 1){
			scanf(&quot;%d&quot;, &amp;k);
			change(1, x, y, k);
		}
		else{
			printf(&quot;%lld\n&quot;, ask(1, x, y));
		}
	}
	return 0;
}
</code></pre>
<h3 id="区间加-区间乘-区间查询">区间加、区间乘、区间查询</h3>
<pre><code>#include&lt;cstdio&gt;
#include&lt;cstring&gt;
#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;

#define LL long long

const int N = 1e5 + 10;

int n, p, m;
int a[N];
struct TREE{
	int l, r;
	LL sum, add, mul;	
}tr[N * 4];

void pushup(int u) {
	tr[u].sum = (tr[u &lt;&lt; 1].sum + tr[u &lt;&lt; 1 | 1].sum) % p;	
}

void eval(TREE &amp;t, int add, int mul) {
	t.sum = ((LL)t.sum * mul + (LL)(t.r - t.l + 1) * add) % p;
	t.mul = (LL)t.mul * mul % p;
	t.add = ((LL)t.add * mul + add) % p;
}

void pushdown(int u) {
	eval(tr[u &lt;&lt; 1], tr[u].add, tr[u].mul);
	eval(tr[u &lt;&lt; 1 | 1], tr[u].add, tr[u].mul);
	tr[u].add = 0;
	tr[u].mul = 1;
}

void build(int u, int l, int r) {
	tr[u].l = l;
	tr[u].r = r;
	if(l == r){
		tr[u].sum = a[r];
		tr[u].add = 0;
		tr[u].mul = 1;
		return;
	}
	tr[u].sum = 0;
	tr[u].add = 0;
	tr[u].mul = 1;
	int mid = l + r &gt;&gt; 1;
	build(u &lt;&lt; 1, l, mid);
	build(u &lt;&lt; 1 | 1, mid + 1, r);
	pushup(u);
}

void modify(int u, int l, int r, int add, int mul) {
	if(tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) eval(tr[u], add, mul);
	else {
		pushdown(u);
		int mid = tr[u].l + tr[u].r &gt;&gt; 1;
		if(l &lt;= mid) modify(u &lt;&lt; 1, l, r, add, mul);
		if(r &gt; mid) modify(u &lt;&lt; 1 | 1, l, r, add, mul);
		pushup(u);
	}
}

int query(int u, int l, int r) {
	if(tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r) return tr[u].sum;
	
	pushdown(u);
	int mid = tr[u].l + tr[u].r &gt;&gt; 1;
	int sum = 0;
	if(l &lt;= mid) sum = query(u &lt;&lt; 1, l, r);
	if(r &gt; mid) sum = (sum + query(u &lt;&lt; 1 | 1, l, r)) % p;
	return sum;
}

int main() {
	scanf(&quot;%d%d%d&quot;, &amp;n, &amp;m, &amp;p);
	for(int i = 1; i &lt;= n; i ++)
		scanf(&quot;%d&quot;, &amp;a[i]);
	build(1, 1, n);
	while(m --) {
		int t, l, r, d;
		scanf(&quot;%d%d%d&quot;, &amp;t, &amp;l, &amp;r);
		if(t == 1){
			scanf(&quot;%d&quot;, &amp;d);
			modify(1, l, r, 0, d);
		}
		else if(t == 2) {
			scanf(&quot;%d&quot;, &amp;d);
			modify(1, l, r, d, 1);
		}
		else printf(&quot;%lld\n&quot;, query(1, l, r));
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://lvlibo.github.io/post/hello-gridea/</id>
        <link href="https://lvlibo.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>